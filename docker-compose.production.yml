services:
  db:
    image: postgres:15-alpine
    stop_grace_period: 0s
    environment:
      POSTGRES_PASSWORD: ${DB_PASS}
      PGUSER: ${DB_USER}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 5s
      retries: 10
    volumes:
      - prodDB:/var/lib/postgresql/data

  backend:
    stop_grace_period: 0s
    env_file: backend/.env
    environment:
      DB_HOST: db
      DB_PASS: ${DB_PASS}
      DB_USER: ${DB_USER}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      NODE_ENV: ${NODE_ENV}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM}
      FRONTEND_URL: ${FRONTEND_URL}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    depends_on:
      db:
        condition: service_healthy
    image: greenfoot/greenfoot-back

  frontend:
    environment:
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
    stop_grace_period: 0s
    env_file: frontend/.env
    image: greenfoot/greenfoot-front

  gateway:
    restart: always
    stop_grace_period: 0s
    build:
      context: gateway
      dockerfile: Dockerfile.production
    ports:
      - ${GATEWAY_PORT}:80

volumes:
  prodDB:
  prodUploads: